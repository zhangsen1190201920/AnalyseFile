#ifndef DOC
#define DOC

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define DOC_HEADER_LEN 512
#define END_OF_CHAIN -2

#define UNKNOWN 0
#define WORD_ASCII 1
#define CN_UTF16 2
#define NOTTEXT -1

// Header of a .doc file. DO NOT change
struct doc_header
{
    char magic[8]; // 0-8
    char uid[16]; // 8-24
    unsigned short revision; // 24-26
    unsigned short vision; // 26-28
    unsigned short byte_order; // 28-30
    unsigned short ssz; // 30-32 sec_size = 2^ssz
    unsigned short sssz; // 32-34 short_sec_size = 2^sssz
    char unused0[10]; // 34-44
    int sat_secnum; // 44-48
    int dir_stream_secid; // 48-52
    char unused1[4]; // 52-56
    int std_stream_minsize; //56-60 
    int ssat_secid; // 60-64
    int ssat_secnum; // 64-68
    int msat_secid; // 68-72
    int msat_secnum; // 72-76
    int msat[109]; // 76-512
};


struct doc_file
{
    char* filename;
    FILE* file;
    size_t size;
    unsigned int sector_size;
    struct doc_header* header;
    struct secids *sat_secids;
    struct secids *ssat_secids;
    int dirnum;
    struct directory* directories;
    struct directory* root_stream; // root of directory tree
    struct directory* word_document_stream; // WordDocument stream. all text here.
};

/**
 * function doc_init
 * @brief this function read a doc file, parse data structures in the file, and initialize a 'struct doc_file'.
 * @param filename: path to the doc file.
 * @return on success, returns a pointer pointed to the struct doc_file. on error, return 0.
*/
struct doc_file*    doc_init(char* filename);
/**
 * function doc_clear
 * @brief free a 'struct doc_file'. free all the memory that malloced in doc_init(). 
 * @param doc: a pointer pointed to a struct doc_file generated by doc_init()
*/
void                doc_clear(struct doc_file* doc);
/**
 * function get_utf8_text
 * @brief extract the text in the doc file, output utf-8 encoded text.
 * @param doc: a pointer pointed to a struct doc_file generated by doc_init()
 * @param textaddr: the address of your text. see example.c
 * @return on success, return the number of bytes of the text. on error, returns 0.
*/
ssize_t             get_utf8_text(struct doc_file* doc, char** textaddr);

#endif